class Solution:
    def canPartition(self, num_str: str, target: int, pos: int, curr_sum: int) -> bool:
        """Recursively checks if num_str can be partitioned to sum up to target"""
        if pos == len(num_str):
            return curr_sum == target  # Base case: check if sum matches target
        
        for i in range(pos, len(num_str)):  # Try all possible partitions
            part = int(num_str[pos:i + 1])  # Convert substring to integer
            if self.canPartition(num_str, target, i + 1, curr_sum + part):
                return True  # Found a valid partition
        
        return False  # No valid partition found

    def punishmentNumber(self, n: int) -> int:
        total_sum = 0
        for i in range(1, n + 1):
            square_str = str(i * i)  # Compute iÂ² as string
            if self.canPartition(square_str, i, 0, 0):  # Check if partition is possible
                total_sum += i * i  # Add to punishment sum
        return total_sum